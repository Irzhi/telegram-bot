import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏ —É @BotFather)
BOT_TOKEN = "8105134473:AAE-bTaKvOtD03rIIUG2dH8BnbaaF7KKmAU"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_notes = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üïê –í—Ä–µ–º—è", callback_data='time'),
            InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data='weather')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("üìã –û –±–æ—Ç–µ", callback_data='about')
        ],
        [
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data='random'),
            InlineKeyboardButton("üòÑ –®—É—Ç–∫–∞", callback_data='joke')
        ],
        [
            InlineKeyboardButton("üê∏ –ú–µ–º", callback_data='meme'),
            InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data='notes')
        ],
        [
            InlineKeyboardButton("üéµ –°–ª—É—à–∞—Ç—å –í–∞–Ω–∏–Ω–æ–í–æ—Ä–æ–±–∏–Ω–æ", callback_data='audio')
        ],
        [
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –í–∞–Ω–µ", url='https://t.me/ivorobinho')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"–Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!\n\n"
        f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n"
        f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/echo - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

üìù *–ó–∞–º–µ—Ç–∫–∏:*
/note <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/clearnotes - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ù–∞–ø–∏—à–∏ "–≤—Ä–µ–º—è" - –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
‚Ä¢ –ù–∞–ø–∏—à–∏ "–ø–æ–≥–æ–¥–∞" - –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üê∏ –ú–µ–º" - —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üìù –ó–∞–º–µ—Ç–∫–∏" - —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –†–µ–∞–≥–∏—Ä—É—é –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏
‚Ä¢ –ú–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    await update.message.reply_text(
        "ü§ñ *–û –±–æ—Ç–µ*\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–°–æ–∑–¥–∞–Ω –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º python-telegram-bot\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–∞—à–µ –∏–º—è\n\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram Bot API.",
        parse_mode='Markdown'
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if context.args:
        message = ' '.join(context.args)
        await update.message.reply_text(f"üì¢ –í—ã —Å–∫–∞–∑–∞–ª–∏: {message}")
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!"
        )

async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    if context.args:
        note_text = ' '.join(context.args)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in user_notes:
            user_notes[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
        user_notes[user_id].append(note_text)

        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìù \"{note_text}\"\n\n"
            f"–£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {len(user_notes[user_id])} –∑–∞–º–µ—Ç–æ–∫.\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"üìù –ó–∞–º–µ—Ç–∫–∏\" –≤ /start"
        )
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
            "‚Ä¢ /note –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
            "‚Ä¢ /note –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
        )

async def clear_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    if user_id in user_notes and user_notes[user_id]:
        count = len(user_notes[user_id])
        user_notes[user_id] = []
        await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫. –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã!")
    else:
        await update.message.reply_text("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_message = update.message.text.lower()

    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if "–≤—Ä–µ–º—è" in user_message:
        from datetime import datetime, timezone, timedelta

        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
        moscow_tz = timezone(timedelta(hours=3))
        current_time = datetime.now(moscow_tz)
        formatted_time = current_time.strftime("%H:%M:%S")
        formatted_date = current_time.strftime("%d.%m.%Y")

        await update.message.reply_text(
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {formatted_time}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)"
        )
    elif "–ø–æ–≥–æ–¥–∞" in user_message:
        import requests

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API wttr.in –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
            response = requests.get("https://wttr.in/Moscow?format=j1", timeout=5)
            if response.status_code == 200:
                weather_data = response.json()
                current = weather_data['current_condition'][0]

                temp = current['temp_C']
                feels_like = current['FeelsLikeC']
                humidity = current['humidity']
                description = current['weatherDesc'][0]['value']
                wind_speed = current['windspeedKmph']

                weather_emojis = {
                    'sunny': '‚òÄÔ∏è', 'clear': '‚òÄÔ∏è', 'partly cloudy': '‚õÖ',
                    'cloudy': '‚òÅÔ∏è', 'overcast': '‚òÅÔ∏è', 'mist': 'üå´Ô∏è',
                    'fog': 'üå´Ô∏è', 'rain': 'üåßÔ∏è', 'drizzle': 'üå¶Ô∏è',
                    'snow': '‚ùÑÔ∏è', 'thunderstorm': '‚õàÔ∏è'
                }

                emoji = 'üå§Ô∏è'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                for key, value in weather_emojis.items():
                    if key in description.lower():
                        emoji = value
                        break

                await update.message.reply_text(
                    f"{emoji} *–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:*\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n"
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    elif "–ø—Ä–∏–≤–µ—Ç" in user_message or "hello" in user_message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞?")
    elif "–∫–∞–∫ –¥–µ–ª–∞" in user_message:
        await update.message.reply_text("–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –ê —É —Ç–µ–±—è –∫–∞–∫?")
    elif "—Å–ø–∞—Å–∏–±–æ" in user_message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å!")
    elif "–ø–æ–∫–∞" in user_message or "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è" in user_message:
        await update.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ!")
    else:
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        responses = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –¢—ã –Ω–∞–ø–∏—Å–∞–ª: '{update.message.text}'",
            "–ü–æ–Ω—è–ª —Ç–µ–±—è! üëç",
            "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            f"–ü–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}"
        ]
        import random
        await update.message.reply_text(random.choice(responses))

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    await update.message.reply_text(
        "üì∏ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, "
        "–Ω–æ –≤–∏–∂—É, —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É! üëç"
    )

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã"""
    await update.message.reply_text("üòÑ –ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! –Ø —Ç–æ–∂–µ –ª—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã! üéâ")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏

    if query.data == 'time':
        from datetime import datetime, timezone, timedelta

        moscow_tz = timezone(timedelta(hours=3))
        current_time = datetime.now(moscow_tz)
        formatted_time = current_time.strftime("%H:%M:%S")
        formatted_date = current_time.strftime("%d.%m.%Y")

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {formatted_time}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)",
            reply_markup=reply_markup
        )

    elif query.data == 'weather':
        import requests

        try:
            response = requests.get("https://wttr.in/Moscow?format=j1", timeout=5)
            if response.status_code == 200:
                weather_data = response.json()
                current = weather_data['current_condition'][0]

                temp = current['temp_C']
                feels_like = current['FeelsLikeC']
                humidity = current['humidity']
                description = current['weatherDesc'][0]['value']
                wind_speed = current['windspeedKmph']

                weather_emojis = {
                    'sunny': '‚òÄÔ∏è', 'clear': '‚òÄÔ∏è', 'partly cloudy': '‚õÖ',
                    'cloudy': '‚òÅÔ∏è', 'overcast': '‚òÅÔ∏è', 'mist': 'üå´Ô∏è',
                    'fog': 'üå´Ô∏è', 'rain': 'üåßÔ∏è', 'drizzle': 'üå¶Ô∏è',
                    'snow': '‚ùÑÔ∏è', 'thunderstorm': '‚õàÔ∏è'
                }

                emoji = 'üå§Ô∏è'
                for key, value in weather_emojis.items():
                    if key in description.lower():
                        emoji = value
                        break
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"{emoji} *–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:*\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n"
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:
                 keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
                 reply_markup = InlineKeyboardMarkup(keyboard)
                 await query.edit_message_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.",
                reply_markup=reply_markup
            )

    elif query.data == 'help':
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/echo - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

üìù *–ó–∞–º–µ—Ç–∫–∏:*
/note <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/clearnotes - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üïê –í—Ä–µ–º—è" - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üå§Ô∏è –ü–æ–≥–æ–¥–∞" - –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üê∏ –ú–µ–º" - —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üìù –ó–∞–º–µ—Ç–∫–∏" - —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –†–µ–∞–≥–∏—Ä—É—é –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏
‚Ä¢ –ú–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ
"""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)

    elif query.data == 'about':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "ü§ñ *–û –±–æ—Ç–µ*\n\n"
            "–í–µ—Ä—Å–∏—è: 1.1 (—Å –∫–Ω–æ–ø–∫–∞–º–∏!)\n"
            "–°–æ–∑–¥–∞–Ω –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º python-telegram-bot\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–∞—à–µ –∏–º—è\n\n"
            "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram Bot API "
            "–≤–∫–ª—é—á–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    elif query.data == 'random':
        import random
        number = random.randint(1, 100)
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üé≤ –¢–≤–æ—ë —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: *{number}*",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    elif query.data == 'joke':
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! üêõ",
            "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–¥–∏–Ω –±–∞–π—Ç –¥—Ä—É–≥–æ–º—É? –¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–±–∏—Ç–æ–≤–æ! üíæ",
            "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—à—ë–ª –∫ –≤—Ä–∞—á—É? –£ –Ω–µ–≥–æ –±—ã–ª –≤–∏—Ä—É—Å! ü¶†",
            "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—å—ë—Ç –∫–æ—Ñ–µ? –°–ø—è—â–∏–π —Ä–µ–∂–∏–º! ‚òï",
            "–ß—Ç–æ —Å–∫–∞–∑–∞–ª HTML, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª CSS? –¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è –∫—Ä–∞—Å–∏–≤—ã–º! üíÑ"
        ]
        import random
        joke = random.choice(jokes)
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üòÑ –í–æ—Ç —Ç–µ–±–µ —à—É—Ç–∫–∞:\n\n{joke}",
            reply_markup=reply_markup
        )

    elif query.data == 'meme':
        memes = [
            "https://i.imgur.com/dQw4w9WgXcQ.jpg üòÇ",
            "–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª –±–∞–≥ –≤ –∫–æ–¥–µ:\n*–ø–∞–Ω–∏–∫–∞* üò±",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: ¬´–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–µ–π –º–∞—à–∏–Ω–µ¬ª ü§∑‚Äç‚ôÇÔ∏è",
            "‚Äî –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n‚Äî –ù–æ–ª—å. –≠—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞! üí°",
            "–ñ–∏–∑–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞:\n‚òï –ö–æ—Ñ–µ ‚Üí üíª –ö–æ–¥ ‚Üí üêõ –ë–∞–≥ ‚Üí üò© –§–∏–∫—Å ‚Üí –ü–æ–≤—Ç–æ—Ä",
            "404: –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ü§ñ",
            "Ctrl+C, Ctrl+V ‚Äî –º–æ–π –ª—é–±–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º! üìã",
            "–ö–æ–≥–¥–∞ –∫–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞:\n*–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ* ü§î"
        ]
        import random
        meme = random.choice(memes)
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üê∏ –õ–æ–≤–∏ –º–µ–º:\n\n{meme}",
            reply_markup=reply_markup
        )

    elif query.data == 'notes':
        user_id = query.from_user.id
        if user_id in user_notes and user_notes[user_id]:
            notes_text = "\n".join([f"‚Ä¢ {note}" for note in user_notes[user_id]])
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üìù *–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:*\n\n{notes_text}\n\n"
                f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –Ω–∞–ø–∏—à–∏: /note <—Ç–µ–∫—Å—Ç>\n"
                f"–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–∏—à–∏: /clearnotes",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üìù *–ó–∞–º–µ—Ç–∫–∏ –ø—É—Å—Ç—ã*\n\n"
                f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –Ω–∞–ø–∏—à–∏: /note <—Ç–µ–∫—Å—Ç>\n"
                f"–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    elif query.data == 'audio':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        try:
            with open('attached_assets/untitled_1751277144360.mp3', 'rb') as audio_file:
                await context.bot.send_audio(
                    chat_id=query.message.chat_id,
                    audio=audio_file,
                    title="–í–∞–Ω–∏–Ω–æ–í–æ—Ä–æ–±–∏–Ω–æ",
                    performer="–í–∞–Ω—è",
                    caption="üéµ –°–ª—É—à–∞–π –í–∞–Ω–∏–Ω–æ–í–æ—Ä–æ–±–∏–Ω–æ! üé∂"
                )
        except Exception as e:
            await query.edit_message_text(
                "üòî –ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.",
                reply_markup=reply_markup
            )
            return
            
        await query.edit_message_text(
            "üéµ *–í–∞–Ω–∏–Ω–æ–í–æ—Ä–æ–±–∏–Ω–æ*\n\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π! üé∂\n"
            "–ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ ‚¨ÜÔ∏è",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    elif query.data == 'back_to_menu':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = query.from_user

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ start)
        keyboard = [
            [
                InlineKeyboardButton("üïê –í—Ä–µ–º—è", callback_data='time'),
                InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data='weather')
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
                InlineKeyboardButton("üìã –û –±–æ—Ç–µ", callback_data='about')
            ],
            [
                InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data='random'),
                InlineKeyboardButton("üòÑ –®—É—Ç–∫–∞", callback_data='joke')
            ],
            [
                InlineKeyboardButton("üê∏ –ú–µ–º", callback_data='meme'),
                InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data='notes')
            ],
            [
                InlineKeyboardButton("üéµ –°–ª—É—à–∞—Ç—å –í–∞–Ω–∏–Ω–æ–í–æ—Ä–æ–±–∏–Ω–æ", callback_data='audio')
            ],
            [
                InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –í–∞–Ω–µ", url='https://t.me/ivorobinho')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
            f"–Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!\n\n"
            f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.warning(f'Update {update} caused error {context.error}')

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("echo", echo))
    application.add_handler(CommandHandler("note", add_note))
    application.add_handler(CommandHandler("clearnotes", clear_notes))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()